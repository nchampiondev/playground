---find a sample of product that appears multiple times in the prices collection

db.prices.aggregate([ 
    { $group: { _id: "$product_id", count: { $sum: 1 } } }, 
    { $match: { count: { $gt: 1 } } }, 
    { $sample: { size: 5 } } 
])

---find all products with same slug

db.products.aggregate([ 
    { $group: { _id: "$slug", count: { $sum: 1 }, products: { $push: "$$ROOT" } } }, 
    { $match: { count: { $gt: 1 } } }, 
    { $project: { slug: "$_id", count: 1, products: 1, _id: 0 } } 
])

---count all products

db.products.countDocuments()

---count distinct based on key (example slug)

db.products.distinct("slug").length

---query to find the 5 minimum price for products with a given value for gpu_ram

db.prices.aggregate([ 
    { $lookup: { from: "products", localField: "product_id", foreignField: "_id", as: "product" } }, 
    { $unwind: "$product" }, 
    { $match: { "product.specifications.gpu_ram": "16GB" } }, 
    { $group: { _id: "$product._id", name: { $first: "$product.name" }, minPrice: { $min: "$price" } } }, 
    { $sort: { minPrice: 1 } },
    { $limit: 5 } 
])


---query to find the 5 maximum price for products with a given value for gpu_ram

db.prices.aggregate([ 
    { $lookup: { from: "products", localField: "product_id", foreignField: "_id", as: "product" } }, 
    { $unwind: "$product" }, 
    { $match: { "product.specifications.gpu_ram": "16GB" } }, 
    { $group: { _id: "$product._id", name: { $first: "$product.name" }, maxPrice: { $max: "$price" } } }, 
    { $sort: { maxPrice: -1 } },
    { $limit: 5 } 
])

---query to find products with name containing a substring

db.products.find({ name: { $regex: "Ventus 3X", $options: "i" } })